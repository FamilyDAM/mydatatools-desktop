name: commit_actions
run-name: ${{ github.actor }} is building and releasing (to github) the mac,windows,and linux versions of the desktop
on:
  push:
    branches: [ "develop" ]
    
jobs:
  build-and-release-macos:
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - uses: actions/checkout@v3

      #- uses: nickwph/apple-provisioning-profile-action@v1
      #  with:
      #    profile-base64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      #- uses: nickwph/apple-build-certificate-action@v1
      #  with:
      #    certificate-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #    certificate-password: ${{ secrets.P12_PASSWORD }}

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
            
      # Install flutter
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64
      - run: flutter config --enable-macos-desktop
      - run: flutter --version    
      - name: print directory
        run: pwd
      - name: install flutter libs
        run: flutter pub get
      - name: build macos
        run: flutter build macos --no-tree-shake-icons --release
      #Build Binary Installations
      - uses: actions/setup-node@v4
        with:
          node-version: latest
      - run: install -g appdmg
      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision




  # build-and-release-linux:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./client
  #   steps:
  #     # checkout dir
  #     - uses: actions/checkout@v3
  #     # Install flutter & build
  #     - uses: subosito/flutter-action@v2
  #       with:
  #         channel: 'stable'
  #         cache: true
  #         cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
  #         cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:' # optional, change this to specify the cache path
  #     - run: |
  #         sudo apt-get update -y
  #         sudo apt-get install -y cmake ninja-build libgtk-3-dev libnss3-dev fonts-noto fonts-noto-cjk libstdc++-10-dev
  #     - run: cmake --version
  #     - run: flutter config --enable-linux-desktop
  #     - run: flutter --version  
  #     - name: install flutter libs
  #       run: flutter pub get
  #     - name: install realm
  #       run: dart run realm install --target-os-type linux --flavor flutter --debug
  #     - name: build linux
  #       run: flutter build linux --no-tree-shake-icons --release
#      # Collect the file and upload as artifact         
#      - name: collect ipa artifacts
#        uses: actions/upload-artifact@v2
#        with:
#         name: release-ipa
#         # Path to the release files
#         path: build/linux/*


#  build-and-release-windows:
#    runs-on: windows-latest
#    defaults:
#      run:
#        working-directory: ./client
#    steps:
#      # checkout dir
#      - uses: actions/checkout@v3
#      # Install flutter & build
#      - uses: subosito/flutter-action@v2
#        with:
#          channel: 'stable'
#          cache: true
#          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
#          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:' # optional, change this to specify the cache path
#      - uses: microsoft/setup-msstore-cli@v1
#      - name: Configure the Microsoft Store CLI
#        run: msstore reconfigure --tenantId $ --clientId $ --clientSecret $ --sellerId $
#      - name: Create MSIX
#        run: msstore package .

#      # Collect the file and upload as artifact         
#      - name: collect ipa artifacts
#        uses: actions/upload-artifact@v2
#        with:
#         name: release-ipa
#         # Path to the release files
#         path: build/linux/*



